KV (Key value)
---------------

The **KV**  feature allows us to insert data in the key value format,
where "_key" is a unique field which allows you to track the entries and "value" is a string
or json object.
If the input is an array of objects then KV pairs are created in batch.

We can also set an expiry field indicating when a particular value will expire.
Expiration should be specified in UTC timestamp.

"_key" - if it is not set, it will be generated by the system

"value" - string or json object. Mandatory

"expireAt" - unix timestamp, indicating when the value will expire (-1 means no expiration)


The format used to set a  value is as follows

.. testcode::

    [
        {
          "_key": "string",
          "value": "string",
          "expireAt": 0
        },

        {
          "_key": "string",
          "value": "string",
          "expireAt": 0
        }
    ]

 The KV operations C8QL are invoked from KV API wrapper

 The Simple Way

 .. testcode::

    from c8 import C8Client, C8QLQueryKillError
    # Initialize the C8 client.
    client = C8Client(protocol='https', host='gdn1.macrometa.io', port=443,
                      email='user@example.com', password='hidden')

    collection_name = 'testcollectionkv'

    # Get List of Collections
    print(client.kv_get_collections())

    # Check if Collection exists and create if it does not
    if client.has_collection(collection_name):
        print("Collection exists")
    else:
        print(client.create_collection_kv(collection_name))

    # Insert Key Value pairs
    data = [
      {
        "_key": "string1",
        "value": "string",
        "expireAt": 0
      },
      {
        "_key": "string2",
        "value": "string",
        "expireAt": 0
      },
      {
        "_key": "string3",
        "value": "string",
        "expireAt": 0
      },
      {
        "_key": "string4",
        "value": "string",
        "expireAt": 0
      }
    ]

    print(client.insert_key_value_pair(collection_name, data))

    # Get value for a key
    print(client.get_value_for_key(collection_name, "string2"))

    # Get keys of a collection
    print(client.get_keys(collection_name))

    # Get KV count of a collection
    print(client.get_kv_count(collection_name))

    # Delete entry for a key
    print(client.delete_entry_for_key(collection_name, "string2"))

    # Delete entry for multiple keys
    print(client.delete_entry_for_keys(collection_name, ["string4", "string1"]))

    # Delete Collection
    print(client.delete_collection_kv(collection_name))





 The Object Oriented Way

 .. testcode::

    client = C8Client(protocol='https', host='gdn1.macrometa.io', port=443)
    # For the "mytenant" tenant, connect to "test" fabric as tenant admin.
    # This returns an API wrapper for the "test" fabric on tenant 'mytenant'
    # Note that the 'mytenant' tenant should already exist.
    tenant = client.tenant(email='user@example.com', password='hidden')
    fabric = tenant.useFabric('_system')

    collection_name = 'testcollectionkv'

    key_value = fabric.key_value

    # Get All Collections
    print(key_value.get_collections())

    # Check if Collection exists and create if it does not
    if key_value.has_collection(collection_name):
        print("collection exists")
    else:
        key_value.create_collection(collection_name)
    # Insert key value pairs
    data = [
                 {
                   "_key": "string1",
                   "value": "value for string1",
                   "expireAt": 0
                 },
                 {
                   "_key": "string2",
                   "value": "{"name": "John", "age":43}",
                   "expireAt": 0
                 },
                 {
                   "_key": "string3",
                   "value": "value for string3",
                   "expireAt": 0
                 }
             ]

    print(key_value.insert_key_value_pair(collection_name, data))

    # Get value for a key
    print(key_value.get_value_for_key(collection_name, "string2"))

    # Get keys of a collection
    print(key_value.get_keys(collection_name))

    # Get KV Count
    print(key_value.get_kv_count(collection_name))

    # Delete the entry for a particular key
    print(key_value.delete_entry_for_key(collection_name, "string2"))

    # Delete entries for multiple keys
    print(key_value.delete_entry_for_keys(collection_name, ["string4", "string1"]))

     # Delete Collection
     print(client.delete_collection_kv(collection_name))


     # Delete Collection
     key_value.delete_collection(collection_name)
